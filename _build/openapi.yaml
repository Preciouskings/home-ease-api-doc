openapi: 3.0.0
info:
  title: Home Ease API
  description: This is the official documentation for the Home Ease backend
  version: 1.0.0
servers:
  - url: 'https://home-ease.onrender.com'
paths:
  /auth/login:
    post:
      summary: Login a new user
      operationId: authLoginUserAccount
      description: Login a user account
      tags:
        - Auth
      requestBody:
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              example: user@mail.com
            password:
              type: string
              example: SuperSecretPassword!
        required: true
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
  /auth/register:
    post:
      summary: Register a new user
      operationId: authRegisterUserAccount
      description: Register a new user account
      tags:
        - Auth
      requestBody:
        schema:
          type: object
          required:
            - email
            - password
          properties:
            email:
              type: string
              example: user@mail.com
            password:
              type: string
              example: SuperSecretPassword!
        required: true
      responses:
        '201':
          description: User account created
  /auth/reset-password:
    post:
      summary: Requests an OTP to reset a user's password
      operationId: authRequestPasswordReset
      description: Requests an OTP to reset a user's password
      tags:
        - Auth
      requestBody:
        schema:
          type: object
          required:
            - email
          properties:
            email:
              type: string
              example: user@mail.com
        required: true
      responses:
        '204':
          description: If a user account with a matching email exists then they'll receive the OTP
  '/auth/reset-password/{otp}':
    put:
      summary: Resets a user's password
      operationId: authResetUserPassword
      description: Resets a user's password
      tags:
        - Auth
      parameters:
        - name: otp
          in: path
          description: The OTP received in user email
          required: true
          schema:
            type: integer
            example: 123456
      requestBody:
        schema:
          email:
            type: string
            example: user@mail.com
          password:
            type: string
            example: SuperSecretPassword!
        required: true
      responses:
        '200':
          description: Password reset successfully
  /auth/logout:
    post:
      summary: Logout a user
      operationId: authLogoutUserAccount
      description: Logout a user account
      tags:
        - Auth
      responses:
        '200':
          description: User logged out successfully
  /roommates:
    get:
      summary: Fetches all faqs in the DB
      operationId: rommmateFetchAll
      description: Fetches all `Faq`s in the DB
      tags:
        - Faq
      responses:
        '200':
          description: Fetched faqs successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1faqs/post/responses/201/content/application~1json/schema'
    post:
      summary: Creates a new faq
      operationId: faqCreate
      description: Creates a new `Faq`
      tags:
        - Faq
      responses:
        '201':
          description: Faq created successfully
          content:
            application/json:
              schema:
                $ref: '#/paths/~1faqs/post/responses/201/content/application~1json/schema'
  '/roommates/{roommateId}':
    get:
      summary: Fetches a roommate by ID
      operationId: roommateFetchById
      description: Fetches a `Roommate` by ID
      tags:
        - Roommate
      parameters:
        - name: roommateId
          in: path
          description: The ID of the roommate
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Roommate fetched successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - department
                  - level
                  - photo
                  - phoneNo
                  - likes
                  - dislikes
                  - gender
                  - nameOfLodge
                  - amount
                properties:
                  name:
                    type: string
                    example: John Doe
                  department:
                    type: string
                    example: ABE
                  level:
                    type: string
                    example: 200lvl
                  photo:
                    type: string
                    example: the actual photo file
                  phoneNo:
                    type: string
                    example: 2348012345678
                  likes:
                    type: array
                    items:
                      type: string
                      example: playing chess
                  dislikes:
                    type: array
                    items:
                      type: string
                      example: noisy environment
                  gender:
                    type: string
                    example: male
                  nameOfLodge:
                    type: string
                    example: Vital Lodge
                  amount:
                    type: integer
                    example: 100000
    put:
      summary: Updates a roommate by ID
      operationId: roommateUpdateById
      description: Updates a `Roommate` by ID
      tags:
        - Roommate
      parameters:
        - name: roommateId
          in: path
          description: The ID of the roommate
          required: true
          schema:
            type: string
      requestBody:
        schema:
          type: object
          properties:
            name:
              type: string
              example: John Doe
            department:
              type: string
              example: ABE
            level:
              type: string
              example: 200lvl
            photo:
              type: string
              example: the actual photo file
            phoneNo:
              type: string
              example: 2348012345678
            likes:
              type: array
              items:
                type: string
                example: playing chess
            dislikes:
              type: array
              items:
                type: string
                example: noisy environment
            gender:
              type: string
              example: male
            nameOfLodge:
              type: string
              example: Vital Lodge
            amount:
              type: integer
              example: 100000
      responses:
        '204':
          description: Roommate updated successfully
    delete:
      summary: Deletes a roommate by ID
      operationId: roommateDeleteById
      description: Deletes a `Roommate` by ID
      tags:
        - Roommate
      parameters:
        - name: roommateId
          in: path
          description: The ID of the roommate
          required: true
          schema:
            type: string
      responses:
        '410':
          description: Roommate deleted successfully
  /faqs:
    get:
      summary: Fetches all faqs in the DB
      operationId: faqFetchAll
      description: Fetches all `Faq`s in the DB
      tags:
        - Faq
      responses:
        '200':
          description: Fetched faqs successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1faqs/post/responses/201/content/application~1json/schema'
    post:
      summary: Creates a new faq
      operationId: faqCreate
      description: Creates a new `Faq`
      tags:
        - Faq
      responses:
        '201':
          description: Faq created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - questions
                  - answers
                properties:
                  questions:
                    type: string
                  answers:
                    type: string
  '/faqs/{faqId}':
    get:
      summary: Fetches a faq by ID
      operationId: faqFetchById
      description: Fetches a `Faq` by ID
      tags:
        - Faq
      parameters:
        - name: faqId
          in: path
          description: The ID of the faq
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Faq fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/paths/~1faqs/post/responses/201/content/application~1json/schema'
    put:
      summary: Updates a faq by ID
      operationId: faqUpdateById
      description: Updates a `Faq` by ID
      tags:
        - Faq
      parameters:
        - name: faqId
          in: path
          description: The ID of the faq
          required: true
          schema:
            type: string
      requestBody:
        schema:
          type: object
          properties:
            questions:
              type: string
            answers:
              type: string
      responses:
        '204':
          description: Faq updated successfully
    delete:
      summary: Deletes a faq by ID
      operationId: faqDeleteById
      description: Deletes a faq by ID
      tags:
        - Faq
      parameters:
        - name: faqId
          in: path
          description: The ID of the faq
          required: true
          schema:
            type: string
      responses:
        '410':
          description: Faq deleted successfully
  /lodges:
    get:
      summary: Fetches all lodges in the DB
      operationId: lodgeFetchAll
      description: Fetches all `Lodge`s in the DB
      tags:
        - Lodge
      responses:
        '200':
          description: Fetched lodges successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1lodges/post/responses/201/content/application~1json/schema'
    post:
      summary: Creates a new lodge
      operationId: lodgeCreate
      description: Creates a new `Lodge`
      tags:
        - Lodge
      responses:
        '201':
          description: Lodge created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - amount
                  - location
                  - images
                  - caretaker
                  - caretakerNo
                  - light
                  - water
                  - tpToSchool
                properties:
                  name:
                    type: string
                    example: Vital Lodge
                  amount:
                    type: integer
                    example: 100000
                  location:
                    type: string
                    example: Ihiagwa
                  images:
                    type: array
                    items:
                      schema:
                        type: string
                        description: the actual photo file
                  caretaker:
                    type: string
                    example: John Doe
                  light:
                    type: integer
                    description: average number of hours of power supply per day
                  water:
                    type: boolean
                    example: true
                  tpToSchool:
                    type: integer
                    example: 100
  '/lodges/{lodgeId}':
    get:
      summary: Fetches a lodge by ID
      operationId: lodgeFetchById
      description: Fetches a `Lodge` by ID
      tags:
        - Lodge
      parameters:
        - name: lodgeId
          in: path
          description: The ID of the lodge
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lodge fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/paths/~1lodges/post/responses/201/content/application~1json/schema'
    put:
      summary: Updates a lodge by ID
      operationId: lodgeUpdateById
      description: Updates a `Lodge` by ID
      tags:
        - Lodge
      parameters:
        - name: lodgeId
          in: path
          description: The ID of the lodge
          required: true
          schema:
            type: string
      requestBody:
        schema:
          type: object
          properties:
            name:
              type: string
              example: Vital Lodge
            amount:
              type: integer
              example: 100000
            location:
              type: string
              example: Ihiagwa
            images:
              type: array
              items:
                schema:
                  type: string
                  description: the actual photo file
            caretaker:
              type: string
              example: John Doe
            light:
              type: integer
              description: average number of hours of power supply per day
            water:
              type: boolean
              example: true
            tpToSchool:
              type: integer
              example: 100
      responses:
        '204':
          description: Lodge updated successfully
    delete:
      summary: Deletes a lodge by ID
      operationId: lodgeDeleteById
      description: Deletes a `Lodge` by ID
      tags:
        - Lodge
      parameters:
        - name: lodgeId
          in: path
          description: The ID of the lodge
          required: true
          schema:
            type: string
      responses:
        '410':
          description: Lodge deleted successfully
  /ecommerce:
    get:
      summary: Fetches all ecommerce products in the DB
      operationId: ecommerceProductsFetchAll
      description: Fetches all `Ecommerce Product`s in the DB
      tags:
        - Ecommerce
      responses:
        '200':
          description: Fetched ecommerce products successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1ecommerce/post/responses/201/content/application~1json/schema'
    post:
      summary: Creates a new ecommerce product
      operationId: ecommerceProductCreate
      description: Creates a new `Ecommerce Product`
      tags:
        - Ecommerce
      responses:
        '201':
          description: Ecommerce product created successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - owner
                  - name
                  - description
                  - image
                  - amount
                  - quantity
                  - phoneNo
                  - location
                properties:
                  owner:
                    type: string
                    example: John Doe
                  name:
                    type: string
                    example: some random product
                  description:
                    type: string
                    example: some random description
                  image:
                    type: string
                    description: the actual photo file
                  amount:
                    type: integer
                    example: 100000
                  quantity:
                    type: integer
                    example: 2
                  phoneNo:
                    type: string
                    example: 2348012345678
                  location:
                    type: string
                    example: location to pickup product
  /ecommerce/plans:
    get:
      summary: Fetches all ecommerce plans in the DB
      operationId: ecommercePlansFetchAll
      description: Fetches all `Ecommerce Plans`s in the DB
      tags:
        - Ecommerce
      responses:
        '200':
          description: Fetched ecommerce plans successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: 2-day plan
                    duration:
                      type: integer
                      description: the duration of the plan (in seconds)
                      example: 172800
                    amount:
                      type: integer
                      description: the cost of the plan (in kobo)
                      example: 500000
  '/ecommerce/{lodgeId}':
    get:
      summary: Fetches an ecommerce product by ID
      operationId: ecommerceProductFetchById
      description: Fetches an `Ecommerce Product` by ID
      tags:
        - Ecommerce
      parameters:
        - name: ecommerceProductId
          in: path
          description: The ID of the ecommerce product
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ecommerce product fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/paths/~1ecommerce/post/responses/201/content/application~1json/schema'
    put:
      summary: Updates a ecommerce product by ID
      operationId: ecommerceProductUpdateById
      description: Updates an `Ecommerce Product` by ID
      tags:
        - Ecommerce
      parameters:
        - $ref: '#/paths/~1ecommerce~1%7BlodgeId%7D/get/parameters/0'
      requestBody:
        schema:
          type: object
          properties:
            owner:
              type: string
              example: John Doe
            name:
              type: string
              example: some random product
            description:
              type: string
              example: some random description
            image:
              type: string
              description: the actual photo file
            amount:
              type: integer
              example: 100000
            quantity:
              type: integer
              example: 2
            phoneNo:
              type: string
              example: 2348012345678
            location:
              type: string
              example: location to pickup product
      responses:
        '204':
          description: Ecommerce product updated successfully
    delete:
      summary: Deletes an ecommerce product by ID
      operationId: ecommerceProductDeleteById
      description: Deletes an `Ecommerce Product` by ID
      tags:
        - Ecommerce
      parameters:
        - $ref: '#/paths/~1ecommerce~1%7BlodgeId%7D/get/parameters/0'
      responses:
        '410':
          description: Ecommerce product deleted successfully
  '/ecommerce/{lodgeId}/payment-link':
    get:
      summary: Fetches the payment link for an ecommerce product
      operationId: ecommerceProductFetchLink
      description: Fetches the checkout link for `Ecommerce Product`
      tags:
        - Ecommerce
      parameters:
        - $ref: '#/paths/~1ecommerce~1%7BlodgeId%7D/get/parameters/0'
        - name: planId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Fetched ecommerce product link successfully
          content:
            application/json:
              schema:
                type: string
                example: 'https://api.paystack.com/ref/to/tx'
components:
  parameters:
    petId:
      name: petId
      in: path
      required: true
      description: The id of the pet to retrieve
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: How many items to return at one time (max 100)
      required: false
      schema:
        type: integer
        format: int32
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    UnexpectedError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NullResponse:
      description: Null response
